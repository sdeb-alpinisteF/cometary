import matplotlib.pyplot as plt
import numpy as np
from scipy import*
import aplpy
from astropy.convolution import Kernel1D
from astropy import units as u
from astropy.io import fits
from spectral_cube import SpectralCube
from spectral_cube import* # SpectralCube 
from spectral_cube import Projection
import scipy.ndimage as nd
from pvextractor import extract_pv_slice
from pvextractor import Path
from sympy import nsolve
from scipy.optimize import fsolve 

#import matplotlib.mlab as mlab
from astropy.convolution import Kernel1D
import scipy.ndimage as nd


cube4 = SpectralCube.read('outfl4_02.fits') 
cube4_12co = SpectralCube.read('12co_outflow4_reprjctd.fits')
comt = Projection.from_hdu(fits.open('outfl4_comt.fits')[0]) #file created from cutout(saved in the same folder)
#downloaded from http://unwise.me/imgsearch/ using ds9 package 
cube4_C18O=SpectralCube.read('outflow4_c18o.fits')

##################################### OPTICAL DEPTH ################################################################

cometaryCUBE_13co=SpectralCube.read('outfl4_02.fits')
cometaryCUBE_12co=SpectralCube.read('12co_outflow4_reprjctd.fits')
cometaryCUBE_c18o=SpectralCube.read('c18o_outflow4_reproj.fits') 


####################### OPTICAL DEPTH CALCULATION:12CO 20X23X903 CELLS ################################################
tau12_nu=np.zeros_like(cometaryCUBE_12co) #defining a zero(empty) matrix for storing calculated tau values

vdim=cometaryCUBE_12co.shape[0]
xdim=cometaryCUBE_12co.shape[2]
ydim=cometaryCUBE_12co.shape[1]
print(xdim,ydim,vdim)
temp_cmb=2.725

counter=0
for y in np.arange(0,5,1):
    for x in np.arange(0,10,1):
        #temp12ex_xy[j][k]=cometaryCUBE_12co.max(axis=0)[j][k].value
        for v in np.arange(0,vdim-1,1):
            #temp12_xynu=cometaryCUBE_12co[i][j][k]
            if cometaryCUBE_12co[v][y][x].value<0:
                tau12_nu[v][y][x]=np.log((temp12ex_xy[y][x]-temp_cmb)/(temp12ex_xy[y][x]-temp_cmb))
                counter+=1
            elif cometaryCUBE_12co[i][j][k].value+temp_cmb>0:
                 tau12_nu[v][y][x]=np.log((temp12ex_xy[j][k]-temp_cmb)/(temp12ex_xy[y][x]-cometaryCUBE_12co[v][y][x].value-temp_cmb))  
                    
                    
                    
######################## OPTICAL DEPTH CALCULATION:12CO(3-2) 20X23X903 CELLS:VERSION 2 #############################

vdim=cometaryCUBE_12co.shape[0]
xdim=cometaryCUBE_12co.shape[2]
ydim=cometaryCUBE_12co.shape[1]
print(xdim,ydim,vdim)
temp_cmb=2.725*u.K

for y in np.arange(15,ydim,1):
    for x in np.arange(0,xdim,1):
        temp12ex_xy=cometaryCUBE_12co.max(axis=0)[y][x]
        for v in np.arange(0,vdim,1):
            #temp12_xynu=cometaryCUBE_12co[i][j][k]
            tau12_nu[v][y][x]=np.log((temp12ex_xy-temp_cmb)/(temp12ex_xy-cometaryCUBE_12co[v][y][x]-temp_cmb))
            #if tau12_nu[i][j][k]<0:
            #tau12_nu[i][j][k]=0        
            
            
uhdr=cometaryCUBE_12co.header
new_hdrTau12=uhdr.copy()
new_hdrTau12['BUNIT']=('')
myhduTau12=fits.PrimaryHDU(tau12_nu,header=new_hdrTau12)
myhduTau12.writeto('cometary_Tau12_nu.fits',overwrite=True)

tau12co_nu=SpectralCube.read('cometary_Tau12_nu.fits')

######################### MAX OPTICAL DEPTH PLOT: 12CO ################################################################

ax = plt.figure().add_axes([0.15, 0.1, 0.8, 1], projection=cometaryCUBE_12co[0].wcs)
im=ax.imshow(tau12co_nu.sum(axis=0).value,interpolation='nearest',label='$^{12}CO$',origin='lower',cmap='gray',vmin=0,vmax=150)
ax.set_ylabel("Dec")
ax.set_xlabel("RA")
clb=plt.colorbar(im)
clb.set_label('Total optical depth ($^{12}$CO)', labelpad=5, y=.5, rotation=90)
plt.legend()
plt.show()
            
          
